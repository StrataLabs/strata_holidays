require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VacationTypesController do
    before(:each) do
    @vacation_type = FactoryGirl.create(:vacation_type)
    @user = FactoryGirl.create(:user, :user_type => User::CUSTOMER)
    sign_in @user
  end
  after(:all) do
    User.delete_all
  end

  context "GET index" do

    it "does not allow access without logging in" do
      sign_out @user
      get :index
      response.should redirect_to(user_session_path)
    end

    it "allows only admin" do
      sign_in @user
      get :index
      assigns(:vacation_types).should == nil
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::VC
      @user.save
      sign_out @user
      sign_in @user
      get :index
      assigns(:vacation_types).should == nil
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = 'A'
      @user.save
      sign_out @user
      sign_in @user
      get :index
      assigns(:vacation_types).should eq([@vacation_type])
    end
  end

  context "GET show" do

    it "does not allow access without logging in" do
      sign_out @user
      get :show, {:id => @vacation_type.to_param}
      response.should redirect_to(user_session_path)
    end

    it "allows only admin" do
      sign_in @user
      get :show, {:id => @vacation_type.to_param}
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::VC
      @user.save
      sign_out @user
      sign_in @user
      get :show, {:id => @vacation_type.to_param}
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = 'A'
      @user.save
      sign_out @user
      sign_in @user
      get :show, {:id => @vacation_type.to_param}
      assigns(:vacation_type).should eq(@vacation_type)
    end
  end

  context "POST create" do
    before(:each) do
      @vacation_type_params = {
        :vac_type => "CustomType"
      }
    end
    it "does not allow access without logging in" do
      sign_out @user
      post :create, {:vacation_type => @vacation_type_params}
      response.should redirect_to(user_session_path)
    end
    it "allows only admin" do
      sign_in @user
      post :create, {:vacation_type => @vacation_type_params}
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::VC
      @user.save
      sign_out @user
      sign_in @user
      post :create, {:vacation_type => @vacation_type_params}
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::ADMIN
      @user.save
      sign_out @user
      sign_in @user
      post :create, {:vacation_type => @vacation_type_params}
      assigns(:vacation_type).should be_a(VacationType)
      VacationType.last.vac_type == "CustomType"
    end
  end

  context "DELETE destroy" do
    it "does not allow access without logging in" do
      sign_out @user
      delete :destroy, {:id => @vacation_type.to_param}
      response.should redirect_to(user_session_path)
    end
    it "allows only admin" do
      sign_in @user
      delete :destroy, {:id => @vacation_type.to_param}
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::VC
      @user.save
      sign_out @user
      sign_in @user
      delete :destroy, {:id => @vacation_type.to_param}
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::ADMIN
      @user.save
      sign_out @user
      sign_in @user
      delete :destroy, {:id => @vacation_type.to_param}
      response.should redirect_to(vacation_types_path)
      VacationType.all.should == []
    end
  end
end
