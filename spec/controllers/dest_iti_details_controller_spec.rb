require 'spec_helper'
describe DestItiDetailsController do
  before(:each) do
    @dest_iti_detail = FactoryGirl.create(:dest_iti_detail)
    @user = FactoryGirl.create(:user)
    session[:user_role] = User::CUSTOMER
    sign_in @user
  end
  after(:all) do
    User.delete_all
  end

  context "GET index" do

    it "does not allow access without logging in" do
      sign_out @user
      get :index
      response.should redirect_to(user_session_path)
    end

    it "allows only admin and VC" do
      sign_in @user
      get :index
      assigns(:dest_iti_details).should == nil
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::VC
      @user.save
      sign_out @user
      sign_in @user
      get :index
      assigns(:dest_iti_details).should eq([@dest_iti_detail])
      session[:user_role] = 'A'
      @user.save
      sign_out @user
      sign_in @user
      get :index
      assigns(:dest_iti_details).should eq([@dest_iti_detail])
    end
  end

  context "GET show" do
    it "does not allow access without logging in" do
      sign_out @user
      get :show, {:id => @dest_iti_detail.to_param}
      response.should redirect_to(user_session_path)
    end
    it "allows only admin and VC" do
      sign_in @user
      get :show, {:id => @dest_iti_detail.to_param}
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::VC
      @user.save
      sign_out @user
      sign_in @user
      get :show, {:id => @dest_iti_detail.to_param}
      assigns(:dest_iti_detail).should eq(@dest_iti_detail)
      session[:user_role] = User::ADMIN
      @user.save
      sign_out @user
      sign_in @user
      get :show, {:id => @dest_iti_detail.to_param}
      assigns(:dest_iti_detail).should eq(@dest_iti_detail)
    end
  end

  context "DELETE destroy" do
    before(:each) do
      @dest_iti_detail2 = FactoryGirl.create(:dest_iti_detail)
    end
    it "does not allow access without logging in" do
      sign_out @user
      delete :destroy, {:id => @dest_iti_detail.to_param}
      response.should redirect_to(user_session_path)
    end
    it "allows only admin and VC" do
      sign_in @user
      delete :destroy, {:id => @dest_iti_detail.to_param}
      response.should redirect_to(user_unwinders_path)
      session[:user_role] = User::VC
      @user.save
      sign_out @user
      sign_in @user
      delete :destroy, {:id => @dest_iti_detail.to_param}
      DestItiDetail.all.should == [@dest_iti_detail2]
      response.should redirect_to(dest_iti_details_path)
      session[:user_role] = User::ADMIN
      @user.save
      sign_out @user
      sign_in @user
      delete :destroy, {:id => @dest_iti_detail2.to_param}
      response.should redirect_to(dest_iti_details_path)
      DestItiDetail.all.should == []
    end
  end
end
# require 'spec_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.

# describe DestItiDetailsController do
#   login_user
#   # This should return the minimal set of attributes required to create a valid
#   # DestItiDetail. As you add validations to DestItiDetail, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) { FactoryGirl.build(:dest_iti_detail).attributes }

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # DestItiDetailsController. Be sure to keep this updated too.
#   let(:valid_session) { {} }

#   describe "GET index" do
#     it "assigns all dest_iti_details as @dest_iti_details" do
#       dest_iti_detail = DestItiDetail.create! valid_attributes
#       get :index, {}, valid_session
#       assigns(:dest_iti_details).should eq([dest_iti_detail])
#     end
#   end

#   describe "GET show" do
#     it "assigns the requested dest_iti_detail as @dest_iti_detail" do
#       dest_iti_detail = DestItiDetail.create! valid_attributes
#       get :show, {:id => dest_iti_detail.to_param}, valid_session
#       assigns(:dest_iti_detail).should eq(dest_iti_detail)
#     end
#   end

#   describe "GET new" do
#     it "assigns a new dest_iti_detail as @dest_iti_detail" do
#       get :new, {}, valid_session
#       assigns(:dest_iti_detail).should be_a_new(DestItiDetail)
#     end
#   end

#   describe "GET edit" do
#     it "assigns the requested dest_iti_detail as @dest_iti_detail" do
#       dest_iti_detail = DestItiDetail.create! valid_attributes
#       get :edit, {:id => dest_iti_detail.to_param}, valid_session
#       assigns(:dest_iti_detail).should eq(dest_iti_detail)
#     end
#   end

#   describe "POST create" do
#     describe "with valid params" do
#       it "creates a new DestItiDetail" do
#         expect {
#           post :create, {:dest_iti_detail => valid_attributes}, valid_session
#         }.to change(DestItiDetail, :count).by(1)
#       end

#       it "assigns a newly created dest_iti_detail as @dest_iti_detail" do
#         post :create, {:dest_iti_detail => valid_attributes}, valid_session
#         assigns(:dest_iti_detail).should be_a(DestItiDetail)
#         assigns(:dest_iti_detail).should be_persisted
#       end

#       it "redirects to the created dest_iti_detail" do
#         post :create, {:dest_iti_detail => valid_attributes}, valid_session
#         response.should redirect_to(DestItiDetail.last)
#       end
#     end

#     describe "with invalid params" do
#       it "assigns a newly created but unsaved dest_iti_detail as @dest_iti_detail" do
#         # Trigger the behavior that occurs when invalid params are submitted
#         DestItiDetail.any_instance.stub(:save).and_return(false)
#         post :create, {:dest_iti_detail => { "dest_iti_header_id" => "invalid value" }}, valid_session
#         assigns(:dest_iti_detail).should be_a_new(DestItiDetail)
#       end

#       it "re-renders the 'new' template" do
#         # Trigger the behavior that occurs when invalid params are submitted
#         DestItiDetail.any_instance.stub(:save).and_return(false)
#         post :create, {:dest_iti_detail => { "dest_iti_header_id" => "invalid value" }}, valid_session
#         response.should render_template("new")
#       end
#     end
#   end

#   describe "PUT update" do
#     describe "with valid params" do
#       it "updates the requested dest_iti_detail" do
#         dest_iti_detail = DestItiDetail.create! valid_attributes
#         # Assuming there are no other dest_iti_details in the database, this
#         # specifies that the DestItiDetail created on the previous line
#         # receives the :update_attributes message with whatever params are
#         # submitted in the request.
#         DestItiDetail.any_instance.should_receive(:update).with({ "dest_iti_header_id" => "1" })
#         put :update, {:id => dest_iti_detail.to_param, :dest_iti_detail => { "dest_iti_header_id" => "1" }}, valid_session
#       end

#       it "assigns the requested dest_iti_detail as @dest_iti_detail" do
#         dest_iti_detail = DestItiDetail.create! valid_attributes
#         put :update, {:id => dest_iti_detail.to_param, :dest_iti_detail => valid_attributes}, valid_session
#         assigns(:dest_iti_detail).should eq(dest_iti_detail)
#       end

#       it "redirects to the dest_iti_detail" do
#         dest_iti_detail = DestItiDetail.create! valid_attributes
#         put :update, {:id => dest_iti_detail.to_param, :dest_iti_detail => valid_attributes}, valid_session
#         response.should redirect_to(dest_iti_detail)
#       end
#     end

#     describe "with invalid params" do
#       it "assigns the dest_iti_detail as @dest_iti_detail" do
#         dest_iti_detail = DestItiDetail.create! valid_attributes
#         # Trigger the behavior that occurs when invalid params are submitted
#         DestItiDetail.any_instance.stub(:save).and_return(false)
#         put :update, {:id => dest_iti_detail.to_param, :dest_iti_detail => { "dest_iti_header_id" => "invalid value" }}, valid_session
#         assigns(:dest_iti_detail).should eq(dest_iti_detail)
#       end

#       it "re-renders the 'edit' template" do
#         dest_iti_detail = DestItiDetail.create! valid_attributes
#         # Trigger the behavior that occurs when invalid params are submitted
#         DestItiDetail.any_instance.stub(:save).and_return(false)
#         put :update, {:id => dest_iti_detail.to_param, :dest_iti_detail => { "dest_iti_header_id" => "invalid value" }}, valid_session
#         response.should render_template("edit")
#       end
#     end
#   end

#   describe "DELETE destroy" do
#     it "destroys the requested dest_iti_detail" do
#       dest_iti_detail = DestItiDetail.create! valid_attributes
#       expect {
#         delete :destroy, {:id => dest_iti_detail.to_param}, valid_session
#       }.to change(DestItiDetail, :count).by(-1)
#     end

#     it "redirects to the dest_iti_details list" do
#       dest_iti_detail = DestItiDetail.create! valid_attributes
#       delete :destroy, {:id => dest_iti_detail.to_param}, valid_session
#       response.should redirect_to(dest_iti_details_url)
#     end
#   end

# end
